local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local local_player = Players.LocalPlayer
local replicated_storage = game:GetService("ReplicatedStorage")

local Window = Rayfield:CreateWindow({
   Name = "GG hub",
   Icon = 0,
   LoadingTitle = "GGhub loading...",
   LoadingSubtitle = "",
   Theme = "Dark",
   ToggleUIKeybind = Enum.KeyCode.RightControl,
   DisableRayfieldPrompts = true,
   DisableBuildWarnings = true,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "GG Hub",
      FileName = "GGhub_SaberSimulator"
   },
   KeySystem = false
})

local Main = Window:CreateTab("Main", 4483362458)
local Farm = Window:CreateTab("Farm", 4483362458)
local Misc = Window:CreateTab("Misc", 4483362458)

-- Auto Swing
Main:CreateToggle({
   Name = "Auto Swing",
   CurrentValue = false,
   Callback = function(Value)
      getgenv().autoSwing = Value
      if Value then
         if local_player.Character and local_player.Backpack then
            local tool = local_player.Backpack:FindFirstChildOfClass("Tool")
            if tool then
               local humanoid = local_player.Character:FindFirstChild("Humanoid")
               if humanoid then
                  humanoid:EquipTool(tool)
               end
            end
         end
         spawn(function()
            while getgenv().autoSwing do
               task.wait(0.1)
               pcall(function()
                  replicated_storage.Events.SwingSaber:FireServer()
               end)
            end
         end)
      end
   end
})

-- Auto Sell
Main:CreateToggle({
   Name = "Auto Sell",
   CurrentValue = false,
   Callback = function(Value)
      getgenv().autoSell = Value
      if Value then
         spawn(function()
            while getgenv().autoSell do
               task.wait(0.5)
               pcall(function()
                  replicated_storage.Events.SellStrength:FireServer()
               end)
            end
         end)
      end
   end
})

-- Auto DailyRewards
Main:CreateToggle({
   Name = "Auto Collect DailyRewards",
   CurrentValue = false,
   Callback = function(Value)
      getgenv().autoReward = Value
      if Value then
         spawn(function()
            while getgenv().autoReward do
               task.wait(5)
               local Events = replicated_storage:FindFirstChild("Events")
               if Events then
                  local UIAction = Events:FindFirstChild("UIAction")
                  if UIAction then
                     for _, rewardType in pairs({"ClaimDailyReward", "ClaimDailyTimedReward"}) do
                        pcall(function()
                           UIAction:FireServer(rewardType)
                        end)
                        task.wait(0.5)
                     end
                  end
               end
            end
         end)
      end
   end
})

-- Auto Equip Best Pets
Main:CreateToggle({
   Name = "Auto EquipBestPets",
   CurrentValue = false,
   Callback = function(Value)
      getgenv().autoPets = Value
      if Value then
         spawn(function()
            while getgenv().autoPets do
               task.wait(5)
               pcall(function()
                  replicated_storage.Events.UIAction:FireServer("EquipBestPets")
               end)
            end
         end)
      end
   end
})

-- Auto Crown
local collectables = workspace:WaitForChild("Collectables", 5)

Main:CreateToggle({
   Name = "Auto Crown",
   CurrentValue = false,
   Callback = function(Value)
      getgenv().autoCrown = Value
      if Value then
         spawn(function()
            while getgenv().autoCrown do
               if collectables and #collectables:GetChildren() > 0 then
                  local crowns = {}
                  for _, v in pairs(collectables:GetChildren()) do
                     if v:IsA("MeshPart") then
                        table.insert(crowns, v)
                     end
                  end
                  replicated_storage.Events.CollectCurrencyPickup:FireServer(crowns)
               end
               task.wait(2)
            end
         end)
      end
   end
})

-- Farm Tab (a completar depois)
Farm:CreateParagraph({Title = "auto FarmBoss", Content = "auto hitBoss"})

Farm:CreateDropdown({
   Name = "Select Boss",
   Options = {"Normal", "Earth"},
   CurrentOption = {"Normal"},
   MultipleOptions = false,
   Callback = function(Options) end,
})

Farm:CreateToggle({
   Name = "auto HitBoss",
   CurrentValue = false,
   Callback = function(Value) end,
})

-- Misc Tab
Misc:CreateParagraph({Title = "Other Functions", Content = ""})

-- WalkSpeed Input
local function getCurrentWalkSpeed()
   local humanoid = local_player.Character and local_player.Character:FindFirstChild("Humanoid")
   return humanoid and humanoid.WalkSpeed or 16
end

local InputWalkSpeed = Misc:CreateInput({
   Name = "Input WalkSpeed",
   CurrentValue = "",
   PlaceholderText = "Speed: " .. tostring(getCurrentWalkSpeed()),
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
      local humanoid = local_player.Character and local_player.Character:FindFirstChild("Humanoid")
      local speed = tonumber(Text)
      if humanoid and speed and speed >= 0 and speed <= 1000 then
         humanoid.WalkSpeed = speed
      end
   end,
})

-- WalkSpeed Slider
local WalkSpeed = Misc:CreateSlider({
   Name = "WalkSpeed",
   Range = {0, 1000},
   Increment = 5,
   Suffix = "Speed",
   CurrentValue = getCurrentWalkSpeed(),
   Callback = function(Value)
      local humanoid = local_player.Character and local_player.Character:FindFirstChild("Humanoid")
      if humanoid then
         humanoid.WalkSpeed = Value
      end
   end,
})

local function onCharacterAdded(character)
   local humanoid = character:WaitForChild("Humanoid", 5)
   if humanoid and WalkSpeed.CurrentValue then
      humanoid.WalkSpeed = WalkSpeed.CurrentValue
   end
end

if local_player.Character then onCharacterAdded(local_player.Character) end
local_player.CharacterAdded:Connect(onCharacterAdded)

Rayfield:LoadConfiguration()
